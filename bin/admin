#!/usr/bin/env ruby

ENV["BUNDLE_GEMFILE"] ||= File.expand_path("../../Gemfile", __FILE__)

require "rubygems"
require "bundler/setup"
require "yaml"
require "optparse"

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')
require 'admin/admin'

DESCRIPTION ="
This tool reads service defination from default configuration
file ../config/default.yml or using the path indicates by -c

Ctrl-C to cleanly terminate
"

# default configuration file
config_file = File.join(File.dirname(__FILE__), "..", "config", "default.yml")

OptionParser.new do |opts|
  opts.banner = "Usage: admin [options]"
  opts.on("-c", "--config CONFIG" ,"Configuration file") {|opt| config_file = opt}
  opts.on("-h", "--help" ,"Help") { puts opts; puts DESCRIPTION;exit }
end.parse!

def symbolize_keys(hash)
  if hash.is_a? Hash
    new_hash = {}
    hash.each {|k, v| new_hash[k.to_sym] = symbolize_keys(v) }
    new_hash
  else
    hash
  end
end

begin
  @config = YAML.load_file(config_file)
  @config = symbolize_keys(@config)
rescue => e
  puts "Can't read config file: #{e}"
  exit 1
end

REQ_OPTS = %w(mbus cc uaa cloud_controller_uri data_file stats_file port ui_credentials ui_admin_credentials sender_email receiver_emails monitored_components log_files log_file).map{|e| e.to_sym}
missing_opts = REQ_OPTS.select {|o| !@config.has_key? o}
unless missing_opts.empty?
  puts "Missing required options: #{missing_opts.join(", ")}"
  exit 1
end

Admin.new(@config).start
